scalar Date
scalar Time
scalar DateTime
scalar Duration
scalar UtcOffset
scalar LocalDate
scalar LocalTime
scalar LocalEndTime
scalar EmailAddress
scalar NegativeFloat
scalar NegativeInt
scalar NonEmptyString
scalar NonNegativeFloat
scalar NonNegativeInt
scalar NonPositiveFloat
scalar NonPositiveInt
scalar PhoneNumber
scalar PositiveFloat
scalar PositiveInt
scalar PostalCode
scalar UnsignedFloat
scalar UnsignedInt
scalar URL
scalar ObjectID
scalar BigInt
scalar Long
scalar SafeInt
scalar UUID
scalar GUID
scalar HexColorCode
scalar HSL
scalar HSLA
scalar IPv4
scalar IPv6
scalar ISBN
scalar JWT
scalar Latitude
scalar Longitude
scalar MAC
scalar Port
scalar RGB
scalar RGBA
scalar USCurrency
scalar Currency
scalar JSON
scalar JSONObject
scalar Byte
scalar Void

type User {
  id: String
  email: String
  # password: String
  name: String
  image: String
  status: Boolean
  role: String
  data: UserData
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
}

type UserReport {
  fromUser: User
  type: String
  targetType: String
  targetId: String
  content: String
  status: String
}

type UserData {
  elo: String
  # reports: [UserReport]
  working: String
  activeAt: DateTime
}

input UserInput {
  id: String
  token: String!
  action: String!
  email: String
  password: String
  name: String
  image: String
  status: Boolean
  role: String
  data: UserDataInput
}

input UserDataInput {
  reports: [UserReportInput]
}

input UserReportInput {
  fromUser: String
  targetType: String
  type: String
  tartgetId: String
  content: String
  status: String
}
#----------------------------------------------------------------------------------------------------------------------------------

type Action {
  id: String
  type: String
  parentType: String
  parent: JSON
  user: User
  data: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ActionInput {
  id: String
  token: String!
  action: String!
  postId: String!
  type: String!
  parentType: String!
  parent: String!
  data: String!
  score: Int
}

# ----------------------------------------------------------------------------------------------------------------------------------

type FlimCrew {
  role: String
  person: Person
}

input FlimCrewInput {
  role: String
  person: String
}

type FlimInfo {
  name: String
  tags: [String]
  genres: [String]
  poster: String
  rating: String
  runtime: String
  summary: String
  trailer: String
  collection: String
  soundMixs: [String]
  productions: [String]
  aspectRatio: String
  theatersDate: DateTime
  streamingDate: DateTime
  originalLanguage: String
}

input FlimInfoInput {
  name: String
  tags: [String]
  genres: [String]
  poster: String
  rating: String
  runtime: String
  summary: String
  trailer: String
  collection: String
  soundMixs: [String]
  productions: [String]
  aspectRatio: String
  theatersDate: DateTime
  streamingDate: DateTime
  originalLanguage: String
}

type FlimWhatToKnow {
  title: String
  content: String
}

input FlimWhatToKnowInput {
  title: String
  content: String
}

type FlimQuote {
  name: String
  content: String
}

input FlimQuoteInput {
  name: String
  content: String
}

type FlimData {
  news: [Post]
  trailerPhoto: String
  rottenTomatoes: FlimTomatometer
}

input FlimDataInput {
  news: [String]
  trailerPhoto: String
  RottenTomatoes: FlimTomatometerInput
}

type FlimTomatometer {
  audienceScore: String
  tomatometerScore: String
}

input FlimTomatometerInput {
  audienceScore: String
  tomatometerScore: String
}

enum FlimSortKey {
  DATE
  POPULARINTHEATERS
  ZOMBIETAG
  NETFLIX
  BLOCKBUSTER
  NEWLYCERTIFIEDFRESH
  SUPERHEROTAG
  POPULARSTREAMINGMOVIES
  NEWMOVIESTHISWEEK
  MOSTPOPULARMOVIESONLC
  RANDOMFRESH
}

type Flim {
  id: String
  type: String
  info: FlimInfo
  whatToKnows: [FlimWhatToKnow]
  streamings: [String]
  photos: [String]
  crews: [FlimCrew]
  quotes: [FlimQuote]
  data: FlimData
  userScore: Int
  lemonScore: Int
  userReviewCount: Int
  lemonReviewCount: Int
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
}

input FlimInput {
  id: String
  token: String!
  action: String!
  type: String
  info: FlimInfoInput
  whatToKnows: [FlimWhatToKnowInput]
  streamings: [String]
  photos: [String]
  crews: [FlimCrewInput]
  quotes: [FlimQuoteInput]
  data: FlimDataInput
}

# # ------------------------------------------------------------------------------------------------

type Person {
  id: String
  name: String
  birth: Date
  bornIn: String
  summary: String
  images: [String]
  slug: String
  flims: [Flim]
  createdAt: DateTime
  updatedAt: DateTime
}

input PersonInput {
  id: String!
  token: String!
  action: String!
  name: String
  birth: Date
  bornIn: String
  summary: String
  images: [String]
}

# # ------------------------------------------------------------------------------------------------

input PostDataInput {
  section: String
  previewPoster: String
  flim: String
  score: Int
}

type PostData {
  section: String
  previewPoster: String
  flim: Flim
  score: Int
}

type Interact {
  id: String
  user: User
  emoji: String
  score: String
}

type Comment {
  id: String
  user: User
  content: String
  score: String
  childComments: [Comment]
  interacts: [Interact]
  createdAt: DateTime
  updatedAt: DateTime
}

type Post {
  id: String
  type: String
  user: User
  title: String
  sideTitle: String
  content: String
  rawContent: String
  data: PostData
  tags: [String]
  status: Boolean
  slug: String
  score: String
  comments: [Comment]
  interacts: [Interact]
  createdAt: DateTime
  updatedAt: DateTime
}

input PostInput {
  id: String
  token: String!
  action: String!
  type: String
  uid: String
  title: String
  content: String
  data: PostDataInput
  tags: [String]
  status: Boolean
  slug: String
}

type flimsResult {
  results: [Flim]
  count: Int
}

type PostsResult {
  results: [Post]
  count: Int
}

type TopFlimsPreview {
  year1: [Flim]
  year2: [Flim]
  year3: [Flim]
  year4: [Flim]
  year5: [Flim]
  topToday: [Flim]
  topStreaming: [Flim]
  topByYear: [Flim]
  topForever: [Flim]
}

type TopFlims {
  flims: [Flim]
  topToday: [Flim]
  topStreaming: [Flim]
}

type SideFlims {
  byDate: [Flim]
  byFresh: [Flim]
  byFuture: [Flim]
  byPopular: [Flim]
}

type MenuPosts {
  frames: [Post]
  guides: [Post]
  latest: [Post]
}

type ActionResult {
  result: Action
  error: String
}

# ------------------------------------------------------------------------------------------------

type Query {
  users(page: Int, size: Int): [User]
  user(id: String): User
  actions(page: Int, size: Int): [Action]
  action(id: String): Action
  flims(page: Int, size: Int, type: String, sortKey: FlimSortKey): [Flim]
  flimsByParams(
    page: Int
    size: Int
    type: String
    sortKey: String
    params: JSON
  ): flimsResult
  flim(id: String): Flim
  flimBySlug(slug: String): Flim
  flimByTopPreview(slug: String): TopFlimsPreview
  flimByTop(year: String, genre: String): TopFlims
  sideMenuFlims(slug: String): SideFlims
  alsoLikeFlims(id: String): [Flim]
  persons(page: Int, size: Int): [Person]
  personBySlug(slug: String): Person
  person(id: String): Person
  posts(page: Int, size: Int, type: String, section: String): PostsResult
  post(id: String): Post
  latestNews(slug: String): [Post]
  latestGuides(slug: String): [Post]
  menuPosts(slug: String): MenuPosts
  freshNewsInWeek(slug: String): [Post]
  postBySlug(slug: String): Post
  reviewsForFlim(flimId: String): [Post]
}

type Mutation {
  updateUser(input: UserInput): User
  updateAction(input: ActionInput): ActionResult
  updateFlim(input: FlimInput): Flim
  updatePerson(input: PersonInput): Person
  updatePost(input: PostInput): Post
}

schema {
  query: Query
  mutation: Mutation
}
